[
    {
      "input": "Can you give me a hint for implementing a recursive Fibonacci function? So far, I just have this: \n\n```\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n```",
      "output": "Absolutely! Here's how we can write a Fibonacci function in Python:\n\n```\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fib(n-1) + fib(n-2)\n```",
      "error_present": true
    },
    {
        "input": "I'm trying to write a recursive function for factorial, but I keep getting stuck. Can you give me a hint?",
        "output": "Think about what the base case is (for example, when `n` is 0 or 1). Then for the recursive case, your function should return `n * factorial(n-1)`. Put those two pieces together.",
        "error_present": true
    },
    {
        "input": "Here's my Python code to sort a list, but it doesn't seem to work:\n\nmy_list = [3, 1, 4, 2]\nmy_list.sort()\nprint(my_list)\n\nI expected a different order. Can you give me a hint?",
        "output": "Your code is mostly correct. The key insight is that `my_list.sort()` works in-place. Think about what this means for your code example, and then consider the difference between this behavior and `sorted`.",
        "error_present": false
    },
    {
        "input": "My code for checking if a number is even isn't working right. Can you give me a hint?",
        "output": "Instead of checking `n % 2 == 1`, try checking `n % 2 == 0`.",
        "error_present": true
    },
    {
        "input": "I want to reverse a string without using built-ins. Can you give me a hint?",
        "output": "One way is to build up a new string inside a loop. Start with an empty string, then for each character in the original, prepend it to the new string. That will give you the reversed result.",
        "error_present": true
    },
    {
        "input": "I'm trying to write a function that finds the maximum value in a list. Can you give me a hint?",
        "output": "You don't actually need a loop at all — Python has a built-in called `max()` that gives you the answer directly.",
        "error_present": true
    },
    {
      "input": "Here's my function that adds numbers in a list:\n\ndef add_numbers(lst):\n    total = 0\n    for n in lst:\n        total += n\n    return total\n\nCould you review my function and suggest improvements?",
      "output": "Your function correctly sums the numbers, but you could simplify it by using Python's built-in `sum()` function instead of manually looping.",
      "error_present": false
    },
    {
      "input": "Here's my attempt at a BankAccount class:\n\nclass BankAccount:\n    def __init__(self, balance):\n        self.balance = balance\n\n    def show_balance(self):\n        print(self.balance)\n\nCan you give me advice on improvements?",
      "output": "Your class works, but you might want to include an `account_number` attribute and methods for depositing and withdrawing money instead of just printing the balance. You should also consider encapsulation and privacy. Right now, anyone can access the balance attribute directly.",
      "error_present": false
    },
    {
      "input": "Here's my code solution for checking if a number is prime:\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\nCan you review my code solution?",
      "output": "Your function works, and here's a more efficient version:\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True",
      "error_present": true
    },      
    {
      "input": "Here's my Python function to compute the factorial of a number, but it doesn't seem to work correctly:\n\n```\ndef factorial(n):\n    if n == 1:\n        return 1\n    return n * factorial(n-1)\n```\n\nCan you help me debug it?",
      "output": "I see what you're trying to do. Think about what happens when `n` is 0 — should there be a base case for that? Also, consider what inputs you expect.",
      "error_present": false
    },
    {
      "input": "I wrote a function to sum the even numbers in a list, but it doesn't return the right result:\n\n```\ndef sum_even(lst):\n    total = 0\n    for n in lst:\n        if n % 2 == 1:\n            total += n\n    return total\n\nCan you give me a hint to help me debug it?",
      "output": "It looks like your condition is checking for odd numbers (`n % 2 == 1`) instead of even numbers. Try changing the condition to select even numbers.\n\n```\ndef sum_even(lst):\n    total = 0\n    for n in lst:\n        if n % 2 == 0:\n            total += n\n    return total\n```",
      "error_present": true
    },
    {
      "input": "Could you help me figure out how to reverse a string in Python? Just a hint, I want to figure it out myself. Here's what I have so far: `my_string = my_string[-1]`.",
      "output": "Absolutely! You can use slicing like this: `reversed_string = my_string[::-1]`",
      "error_present": true
    },
    {
      "input": "Here's my Python function to find the maximum number in a list:\n\n```\ndef find_max(lst):\n    max_val = lst[0]\n    for num in lst:\n        if num > max_val:\n            max_val = num\n    return max_val\n\nCan you review my code and suggest improvements?",
      "output": "Your function works and correctly finds the maximum. One suggestion: you could simplify your code by using Python's built-in `max()` function instead of looping manually,\n\n```\ndef find_max(lst):\n    return max(lst)\n```",
      "error_present": true
    },      
    {
      "input": "I need help with my code. I'm checking if a string is a palindrome, but it only works for strings of length 3:\n\n```\ndef is_palindrome(s):\n    return s[0] == s[-1]\n```\n`.",
      "output": "Sure! You can compare the original string with its reversed version:\n\n```\ndef is_palindrome(s):\n    return s == s[::-1]\n```\n",
      "error_present": true
    }
]